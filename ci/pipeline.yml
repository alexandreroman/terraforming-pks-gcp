---
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: template
  type: git
  source:
    uri: https://github.com/making/terraforming-pks-gcp
- name: terraform-state
  type: gcs
  source:
    bucket: ((terraform_statefile_bucket))
    json_key: ((gcp_service_account_key))
    versioned_file: terraform.tfstate
- name: pks
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: pivotal-container-service

groups:
- name: pks
  jobs:
  - bootstrap-terraform-state
  - pave-gcp
  - config-authentication
  - config-director
  - deploy-director
  - upload-pks
  - config-pks
  - deploy-pks
  - wipe-env
- name: nat
  jobs:
  - start-nat
  - stop-nat

jobs:
- name: bootstrap-terraform-state
  build_logs_to_retain: 5
  serial: true
  plan:
  - task: create-terraform-state
    params:
      TERRAFORM_STATEFILE_BUCKET: ((terraform_statefile_bucket))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      run:
        path: bash
        args: 
        - -c
        - |
          # https://github.com/pivotal-cf/pcf-pipelines/blob/master/install-pcf/gcp/tasks/create-initial-terraform-state/task.sh
          set -eu

          echo $GCP_SERVICE_ACCOUNT_KEY > gcloud.key
          gcloud auth activate-service-account --key-file=gcloud.key

          files=$(gsutil ls "gs://${TERRAFORM_STATEFILE_BUCKET}")

          if [ $(echo $files | grep -c terraform.tfstate) == 0 ]; then
            echo "{\"version\": 3}" > terraform.tfstate
            gsutil versioning set on gs://${TERRAFORM_STATEFILE_BUCKET}
            gsutil cp terraform.tfstate "gs://${TERRAFORM_STATEFILE_BUCKET}/terraform.tfstate"
          else
            echo "terraform.tfstate file found, skipping"
            exit 0
          fi

- name: pave-gcp
  build_logs_to_retain: 5
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: tfstate-output/*.tfstate
  plan:
  - aggregate:
    - get: template
    - get: terraform-state
  - task: terraform-apply
    params:
      TFVARS: ((tfvars))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: light
      inputs:
      - name: template
      - name: terraform-state
      outputs:
      - name: tfstate-output
      run:
        path: sh
        args: 
        - -c
        - |
          set -e
          cat <<EOF > terraform.tfvars
          ${TFVARS}
          EOF
          terraform init \
                    template
          terraform plan \
                    -var-file terraform.tfvars \
                    -out terraform.tfplan \
                    -state terraform-state/terraform.tfstate \
                    template
          terraform apply \
                    -state-out tfstate-output/terraform.tfstate \
                    terraform.tfplan

- name: config-authentication
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - pave-gcp
      trigger: true
  - task: config-director
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      OM_DECRYPTION_PWD: ((om_decryption_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -eu          
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources."google_compute_address.ops-manager-public-ip".primary.attributes.address')
          echo "OSPMAN: https://$OPSMAN_DOMAIN_OR_IP_ADDRESS"
          until $(curl --output /dev/null -k --silent --head --fail https://$OPSMAN_DOMAIN_OR_IP_ADDRESS/setup); do
              printf '.'
              sleep 5
          done

          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            configure-authentication \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --decryption-passphrase $OM_DECRYPTION_PWD

- name: config-director
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - config-authentication
      trigger: true
  - task: config-director
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      DIRECTOR_VM_TYPE: ((director_vm_type))
      INTERNET_CONNECTED: ((internet_connected))
      OPS_MGR_TRUSTED_CERTS: ((ops_mgr_trusted_certs))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -eu

          AUTH_JSON=$(cat terraform-state/terraform.tfstate | jq -r .modules[0].outputs.AuthJSON.value)
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources."google_compute_address.ops-manager-public-ip".primary.attributes.address')
          GCP_PROJECT_ID=$(echo $AUTH_JSON | jq -r .project_id)
          GCP_RESOURCE_PREFIX=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Default Deployment Tag".value')
          GCP_SERVICE_ACCOUNT_KEY=${AUTH_JSON}
          
          iaas_configuration=$(
            jq -n \
              --arg gcp_project "$GCP_PROJECT_ID" \
              --arg default_deployment_tag "$GCP_RESOURCE_PREFIX" \
              --arg auth_json "$GCP_SERVICE_ACCOUNT_KEY" \
              '
              {
                "project": $gcp_project,
                "default_deployment_tag": $default_deployment_tag,
                "auth_json": $auth_json
              }
              '
          )

          director_config=$(cat <<-EOF
          {
            "ntp_servers_string": "metadata.google.internal",
            "resurrector_enabled": true,
            "post_deploy_enabled": true,
            "database_type": "internal",
            "blobstore_type": "local"
          }
          EOF
          )

          availability_zones=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | map({name: .})')
          az_configuration="{\"availability_zones\": $availability_zones}"

          network_configuration=$(
            jq -n \
              --argjson icmp_checks_enabled false \
              --arg pks_infrastructure_network_name $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Infrastructure Network Name".value') \
              --arg pks_infrastructure_iaas_identifier $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Infrastructure Network Google Network Name ".value') \
              --arg pks_infrastructure_network_cidr $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Infrastructure Network CIDR".value') \
              --arg pks_infrastructure_reserved_ip_ranges $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Infrastructure Network Reserved IP Ranges".value') \
              --arg pks_infrastructure_dns $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Infrastructure Network DNS".value') \
              --arg pks_infrastructure_gateway $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Infrastructure Network Gateway".value') \
              --arg pks_infrastructure_availability_zones $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | join(",")') \
              --arg pks_main_network_name $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network Name".value') \
              --arg pks_main_iaas_identifier $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network Google Network Name ".value') \
              --arg pks_main_network_cidr $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network CIDR".value') \
              --arg pks_main_reserved_ip_ranges $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network Reserved IP Ranges".value') \
              --arg pks_main_dns $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network DNS".value') \
              --arg pks_main_gateway $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network Gateway".value') \
              --arg pks_main_availability_zones $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | join(",")') \
              --arg pks_services_network_name $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Service Network Name".value') \
              --arg pks_services_iaas_identifier $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Service Network Google Network Name ".value') \
              --arg pks_services_network_cidr $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Service Network CIDR".value') \
              --arg pks_services_reserved_ip_ranges $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Services Network Reserved IP Ranges".value') \
              --arg pks_services_dns $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Services Network DNS".value') \
              --arg pks_services_gateway $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Services Network Gateway".value')\
              --arg pks_services_availability_zones $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | join(",")') \
              '
              {
                "icmp_checks_enabled": $icmp_checks_enabled,
                "networks": [
                  {
                    "name": $pks_infrastructure_network_name,
                    "service_network": false,
                    "subnets": [
                      {
                        "iaas_identifier": $pks_infrastructure_iaas_identifier,
                        "cidr": $pks_infrastructure_network_cidr,
                        "reserved_ip_ranges": $pks_infrastructure_reserved_ip_ranges,
                        "dns": $pks_infrastructure_dns,
                        "gateway": $pks_infrastructure_gateway,
                        "availability_zones": ($pks_infrastructure_availability_zones | split(","))
                      }
                    ]
                  },
                  {
                    "name": $pks_main_network_name,
                    "service_network": false,
                    "subnets": [
                      {
                        "iaas_identifier": $pks_main_iaas_identifier,
                        "cidr": $pks_main_network_cidr,
                        "reserved_ip_ranges": $pks_main_reserved_ip_ranges,
                        "dns": $pks_main_dns,
                        "gateway": $pks_main_gateway,
                        "availability_zones": ($pks_main_availability_zones | split(","))
                      }
                    ]
                  },
                  {
                    "name": $pks_services_network_name,
                    "service_network": true,
                    "subnets": [
                      {
                        "iaas_identifier": $pks_services_iaas_identifier,
                        "cidr": $pks_services_network_cidr,
                        "reserved_ip_ranges": $pks_services_reserved_ip_ranges,
                        "dns": $pks_services_dns,
                        "gateway": $pks_services_gateway,
                        "availability_zones": ($pks_services_availability_zones | split(","))
                      }
                    ]
                  }
                ]
              }'
          )

          network_assignment=$(
            jq -n \
              --arg availability_zones $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | join(",")') \
              --arg network $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Infrastructure Network Name".value') \
              '
              {
                "singleton_availability_zone": ($availability_zones | split(",") | .[0]),
                "network": $network
              }'
          )

          security_configuration=$(
            jq -n \
              --arg trusted_certificates "$OPS_MGR_TRUSTED_CERTS" \
              '
              {
                "trusted_certificates": $trusted_certificates,
                "vm_password_type": "generate"
              }'
          )

          resource_configuration=$(cat <<-EOF
          {
            "director": {
              "instance_type": {
                "id": "${DIRECTOR_VM_TYPE}"
              },
              "internet_connected": ${INTERNET_CONNECTED}
            },
            "compilation": {
              "internet_connected": ${INTERNET_CONNECTED}
            }
          }
          EOF
          )

          echo "Configuring IaaS and Director..."

          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            configure-bosh \
            --iaas-configuration "$iaas_configuration" \
            --director-configuration "$director_config" \
            --az-configuration "$az_configuration" \
            --networks-configuration "$network_configuration" \
            --network-assignment "$network_assignment" \
            --security-configuration "$security_configuration" \
            --resource-configuration "$resource_configuration" \

- name: deploy-director
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - config-director
      trigger: true
  - task: apply-changes
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      <<: *APPLY_CHANGES

- name: upload-pks
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - deploy-director
      trigger: true
    - get: pks
      params:
        globs: 
        - "pks-linux-*"
  - task: copy-om
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      outputs:
      - name: om
      run:
        path: bash
        args: 
        - -c
        - |
          set -eu
          cp `which om-linux` om/
  - task: upload-pks
    params:
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      CLOUDSDK_CORE_PROJECT: ((gcp_project_id))
      PKS_ENV_PREFIX: ((pks_env_prefix))
      PIVNET_API_TOKEN: ((pivnet_api_token))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: alpine
      inputs:
      - name: om
      - name: pks
      caches:
      - path: cache/.ssh
      - path: cache/.config
      run:
        path: bash
        args: 
        - -c
        - |
          set -e

          RELEASE_ID=`cat pks/metadata.json | python -c 'import json,sys;print json.load(sys.stdin)["Release"]["ID"]'`
          PRODUCT_ID=`cat pks/metadata.json | python -c 'import json,sys;print json.load(sys.stdin)["ProductFiles"][0]["ID"]'`
          AWS_OBJECT_KEY=`cat pks/metadata.json | python -c 'import json,sys;print json.load(sys.stdin)["ProductFiles"][0]["AWSObjectKey"]'`
          FILENAME=`basename ${AWS_OBJECT_KEY}`
          DOWNLOAD_URL="https://network.pivotal.io/api/v2/products/pivotal-container-service/releases/${RELEASE_ID}/product_files/${PRODUCT_ID}/download"

          cat <<EOF > service-account.json
          ${GCP_SERVICE_ACCOUNT_KEY}
          EOF

          cp -r cache/.ssh /root/
          cp -r cache/.config /root/

          gcloud auth activate-service-account \
              --key-file service-account.json
          ZONE=`gcloud compute instances list --filter name:${PKS_ENV_PREFIX}-ops-manager | awk 'NR>1 {print $2}'`
          
          set +e
          LS=`gcloud compute ssh ubuntu@${PKS_ENV_PREFIX}-ops-manager \
              --zone ${ZONE} \
              --force-key-file-overwrite \
              --strict-host-key-checking=no \
              --quiet \
              --command "ls ${FILENAME}"`

          cp -r /root/.ssh cache/
          cp -r /root/.config cache/

          set -e
          if [ "${LS}" = "${FILENAME}" ];then
            echo "${FILENAME} exists"
          else
            echo "Downloading ${FILENAME} from ${DOWNLOAD_URL} on OspMamager"
            gcloud compute ssh ubuntu@${PKS_ENV_PREFIX}-ops-manager \
                --zone ${ZONE} \
                --force-key-file-overwrite \
                --strict-host-key-checking=no \
                --quiet \
                --command "wget -q -O "${FILENAME}" --header='Authorization: Token ${PIVNET_API_TOKEN}' ${DOWNLOAD_URL}" 
          fi

          set +e
          LS=`gcloud compute ssh ubuntu@${PKS_ENV_PREFIX}-ops-manager \
              --zone ${ZONE} \
              --force-key-file-overwrite \
              --strict-host-key-checking=no \
              --quiet \
              --command "ls om-linux"`

          set -e
          if [ "${LS}" = "om-linux" ];then
            echo "om-linux exists"
          else
            echo "scp om-linux to OspManager"
            gcloud compute scp om/om-linux ubuntu@${PKS_ENV_PREFIX}-ops-manager:~/ \
                --zone ${ZONE}
          fi

          # upload
          gcloud compute ssh ubuntu@${PKS_ENV_PREFIX}-ops-manager \
              --zone ${ZONE} \
              --force-key-file-overwrite \
              --strict-host-key-checking=no \
              --quiet \
              --command "~/om-linux --target https://localhost -k -u ${OPS_MGR_USR} -p ${OPS_MGR_PWD} --request-timeout 3600 upload-product -p ~/${FILENAME}"   

          PRODUCT_NAME=`basename $FILENAME .pivotal | python -c 'print("-".join(raw_input().split("-")[:-2]))'`
          PRODUCT_VERSION=`basename $FILENAME .pivotal | python -c 'print("-".join(raw_input().split("-")[-2:]))'`

          # stage
          gcloud compute ssh ubuntu@${PKS_ENV_PREFIX}-ops-manager \
              --zone ${ZONE} \
              --force-key-file-overwrite \
              --strict-host-key-checking=no \
              --quiet \
              --command "~/om-linux --target https://localhost -k -u ${OPS_MGR_USR} -p ${OPS_MGR_PWD} stage-product -p ${PRODUCT_NAME} -v ${PRODUCT_VERSION}" 

- name: config-pks
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - upload-pks
      trigger: true
    - get: pks
      passed:
      - upload-pks
      params:
        globs: 
        - "pks-linux-*"
      trigger: true
  - task: config-pks
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: terraform-state
      - name: pks
      run:
        path: bash
        args: 
        - -c
        - |
          set -eu

          om_generate_cert() (
            set -eu
            local domains="$1"

            local data=$(echo $domains | jq --raw-input -c '{"domains": (. | split(" "))}')

            local response=$(
              om-linux \
                --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
                --username "$OPS_MGR_USR" \
                --password "$OPS_MGR_PWD" \
                --skip-ssl-validation \
                curl \
                --silent \
                --path "/api/v0/certificates/generate" \
                -x POST \
                -d $data
              )

            echo "$response"
          )

          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources."google_compute_address.ops-manager-public-ip".primary.attributes.address')
          PKS_API_IP=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources."google_compute_address.pks-api-ip".primary.attributes.address')
          PKS_DOMAIN=$(echo $PKS_API_IP | tr '.' '-').sslip.io
          AWS_OBJECT_KEY=`cat pks/metadata.json | python -c 'import json,sys;print json.load(sys.stdin)["ProductFiles"][0]["AWSObjectKey"]'`
          FILENAME=`basename ${AWS_OBJECT_KEY}`
          PRODUCT_NAME=`basename $FILENAME .pivotal | python -c 'print("-".join(raw_input().split("-")[:-2]))'`
          AUTH_JSON=$(cat terraform-state/terraform.tfstate | jq -r .modules[0].outputs.AuthJSON.value)
          GCP_PROJECT_ID=$(echo $AUTH_JSON | jq -r .project_id)
          GCP_NETWORK=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources."google_compute_network.pks-network".primary.id')

          availability_zones=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | map({name: .})')
          az_configuration="{\"availability_zones\": $availability_zones}"

          configuration_network=$(
            jq -n \
              --arg pks_main_network_name $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network Name".value') \
              --arg pks_services_network_name $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Service Network Name".value') \
              --arg availability_zones $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | join(",")') \
              '
              {
                "network": {
                  "name": $pks_main_network_name
                },
                "service_network": {
                  "name": $pks_services_network_name
                  },
                "singleton_availability_zone": {
                  "name": ($availability_zones | split(",") | .[1]),
                },
                "other_availability_zones": ($availability_zones | split(",") | map({name: .}))
              }'
          )

          certificates=$(om_generate_cert "*.sslip.io *.x.sslip.io")
          cert_pem=`echo $certificates | jq -r '.certificate'`
          key_pem=`echo $certificates | jq -r '.key'`

          configuration_properties=$(
            jq -n \
              --arg pks_main_network_name $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Main Network Name".value') \
              --arg pks_services_network_name $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Service Network Name".value') \
              --arg availability_zones $(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs."Availability Zones".value | join(",")') \
              --arg cert_pem "$cert_pem" \
              --arg key_pem "$key_pem" \
              --arg gcp_project_id ${GCP_PROJECT_ID} \
              --arg gcp_network ${GCP_NETWORK} \
              --arg gcp_service_account_key "${AUTH_JSON}" \
              --arg uaa_url "api-${PKS_DOMAIN}" \
              '
              {
                ".pivotal-container-service.pks_tls": { 
                  "value": {
                    "cert_pem": $cert_pem,
                    "private_key_pem": $key_pem
                  }
                },
                ".properties.plan1_selector": {
                  "value": "Plan Active"
                },
                ".properties.plan1_selector.active.az_placement": {
                  "value": ($availability_zones | split(",") | .[2])
                },
                ".properties.plan1_selector.active.master_vm_type": {
                  "value": "micro"
                },
                ".properties.plan1_selector.active.worker_vm_type": {
                  "value": "medium"
                },
                ".properties.plan1_selector.active.worker_instances": {
                  "value": 1
                },
                ".properties.plan2_selector": {
                  "value": "Plan Active"
                },
                ".properties.plan2_selector.active.az_placement": {
                  "value": ($availability_zones | split(",") | .[0])
                },
                ".properties.plan2_selector.active.master_vm_type": {
                  "value": "small"
                },
                ".properties.plan2_selector.active.worker_vm_type": {
                  "value": "medium"
                },
                ".properties.plan2_selector.active.worker_instances": {
                  "value": 3
                },
                ".properties.plan3_selector": {
                  "value": "Plan Inactive"
                },
                ".properties.cloud_provider": {
                  "value": "GCP"
                },
                ".properties.cloud_provider.gcp.project_id": {
                  "value": $gcp_project_id
                },
                ".properties.cloud_provider.gcp.network": {
                  "value": $gcp_network
                },
                ".properties.cloud_provider.gcp.service_key": {
                  "value": $gcp_service_account_key
                },
                ".properties.uaa_url": {
                  "value": $uaa_url
                }
              }'
          )

          echo "Configuring PKS Tile ..."

          om-linux \
            --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --skip-ssl-validation \
            configure-product \
            --product-name "${PRODUCT_NAME}" \
            --product-network "${configuration_network}" \
            --product-properties "${configuration_properties}" \  
          # --product-resources "${configuration_resources}" \

          echo "PKS API: https://pks-api-${PKS_DOMAIN}:9092"
          echo "UAA: https://api-${PKS_DOMAIN}:8443"

- name: deploy-pks
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - config-pks
      trigger: true
    - get: pks
      passed:
      - config-pks
      params:
        globs: 
        - "pks-linux-*"
      trigger: true
  - task: apply-changes
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      <<: *APPLY_CHANGES

- name: wipe-env
  build_logs_to_retain: 5
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: tfstate-output/*.tfstate
  plan:
  - aggregate:
    - get: template
    - get: terraform-state
      passed:
      - pave-gcp
  - task: delete-installation
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set +e  

          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources."google_compute_address.ops-manager-public-ip".primary.attributes.address')
          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --request-timeout 900 \
            delete-installation

  - task: terraform-destory
    params:
      TFVARS: ((tfvars))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: light
      inputs:
      - name: template
      - name: terraform-state
      outputs:
      - name: tfstate-output
      run:
        path: sh
        args: 
        - -c
        - |
          set -e

          cat <<EOF > terraform.tfvars
          ${TFVARS}
          EOF
          terraform init \
                    template
          terraform destroy \
                    -force \
                    -state terraform-state/terraform.tfstate \
                    -state-out tfstate-output/terraform.tfstate \
                    template 

- name: stop-nat
  build_logs_to_retain: 5
  serial_groups: [nat]
  plan:
  - task: stop-nat
    params:
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      CLOUDSDK_CORE_PROJECT: ((gcp_project_id))
      PKS_ENV_PREFIX: ((pks_env_prefix))
      SUBCMD: stop
    config:
      <<: *START_STOP_NAT

- name: start-nat
  build_logs_to_retain: 5
  serial_groups: [nat]
  plan:
  - task: stop-nat
    params:
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      CLOUDSDK_CORE_PROJECT: ((gcp_project_id))
      PKS_ENV_PREFIX: ((pks_env_prefix))
      SUBCMD: start
    config:
      <<: *START_STOP_NAT

params: 
  apply-changes: &APPLY_CHANGES
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: pcfnorm/rootfs
    inputs:
    - name: terraform-state
    run:
      path: bash
      args: 
      - -c
      - |
        set -eu

        OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources."google_compute_address.ops-manager-public-ip".primary.attributes.address')

        echo "Applying changes on Ops Manager @ ${OPSMAN_DOMAIN_OR_IP_ADDRESS}"

        om-linux \
          --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
          --skip-ssl-validation \
          --username "${OPS_MGR_USR}" \
          --password "${OPS_MGR_PWD}" \
          apply-changes \
          --ignore-warnings
  start-stop-nat: &START_STOP_NAT
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: google/cloud-sdk
        tag: alpine
    run:
      path: bash
      args: 
      - -c
      - |
        set -e
        cat <<EOF > service-account.json
        ${GCP_SERVICE_ACCOUNT_KEY}
        EOF
        gcloud auth activate-service-account \
             --key-file service-account.json
        NAMES=(`gcloud compute instances list --filter tags:${PKS_ENV_PREFIX}-nat-instance | awk 'NR>1 {print $1}'`)
        ZONES=(`gcloud compute instances list --filter tags:${PKS_ENV_PREFIX}-nat-instance | awk 'NR>1 {print $2}'`)
        for i in `seq 1 ${#ZONES[*]}`;do
          gcloud compute instances ${SUBCMD} ${NAMES[$((i - 1))]} --zone ${ZONES[$((i - 1))]}
        done
        gcloud compute instances list
